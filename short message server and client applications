#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <netdb.h>

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <ctype.h>
#include <fcntl.h>
#include <sys/ioctl.h>

#define PORT 1080
#define BUF_LEN  2000
#define STDIN 0
#define SADDR "127.0.0.1"
#define TV_SEC 10


void test_fds(fd_set testfds, int sock) {
int nread;
char buffer[BUF_LEN];

  if (FD_ISSET(STDIN, &testfds)) {
ioctl(STDIN,FIONREAD,&nread);
if (nread == 0) {
        printf("Keyboard done!\n");
  exit(0);
}
        nread = read(STDIN, buffer, nread);
buffer[nread] = '\0';
write(sock, buffer, nread);
      }

      if (FD_ISSET(sock, &testfds)) {
ioctl(sock,FIONREAD,&nread);
if (nread == 0) {
        printf("Socket done!\n");
  exit(0);
}
        nread = read(sock, buffer, nread);
buffer[nread] = '\0';
        printf("%s", buffer);
      }
}

int main(int argc, char **argv)
{
    int sock, bytes_recieved;
    char send_data[BUF_LEN],recv_data[BUF_LEN];
    struct sockaddr_in server_addr;
    fd_set readfds,testfds;
    struct timeval tv;
int maxfd,stdeof,c,ret;
char *saddr = NULL, *sport = NULL;

while ((c = getopt (argc, argv, "p:s:")) != -1)
    switch (c)
    {
        case 's':
            saddr = optarg;
            break;
        case 'p':
            sport = optarg;
            break;
        case '?':
            fprintf(stderr,"Unrecognized option: -%c\n", optopt);
            return 1;
        default:
            abort ();
    }

    /* Open socket descriptor */
    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) == -1) {
        perror("Socket");
        exit(1);
    }

    /* Fill structure with 0 */
    bzero(&(server_addr.sin_zero),sizeof server_addr);
    server_addr.sin_family = AF_INET;

    /* Port number defined? */
    if ( sport != NULL )
        server_addr.sin_port = htons(atoi(sport));
    else
        server_addr.sin_port = htons(PORT);

    /* Remote ip address defined? */
    if ( saddr != NULL )
        inet_pton(AF_INET, saddr, &(server_addr.sin_addr));
    else
        inet_pton(AF_INET, SADDR , &(server_addr.sin_addr));


    /* Connect to remote server */
    if (connect(sock, (struct sockaddr *)&server_addr, sizeof(struct sockaddr)) == -1)
    {
        perror("Connect");
        exit(1);
    }

    FD_ZERO(&readfds);
    FD_SET(STDIN, &readfds);
    FD_SET(sock, &readfds);

while (1) {
    testfds=readfds;

    tv.tv_sec = TV_SEC;
    tv.tv_usec = 0;


    ret=select(FD_SETSIZE, &testfds, (fd_set *)NULL, (fd_set *)NULL, &tv);

    switch (ret) {
case 0:
          printf("Timed out.\n");
  break;
case -1:
          printf("Select problem.\n");
          exit(1);
    default:
      test_fds(testfds,sock);
  break;
    }
  }
}

void authenticate(int client) {
  char userID[20], password[20];
  char authMessage[50];

  // Prompt user for UserID and password
  printf("UserID: ");
  scanf("%s", userID);
  printf("Password: ");
  scanf("%s", password);

  // Send user credentials to server
  sprintf(authMessage, "USER %s %s", userID, password);
  send(client, authMessage, strlen(authMessage), 0);

  // Receive server response
  char response[50];
  recv(client, response, 50, 0);

  // Parse response
  if (strcmp(response, "+OK UserID and password okay go ahead.") == 0) {
    printf("Authentication successful.\n");
  } else {
    printf("Authentication failed.\n");
    close(client);
    exit(1);
  }
}

// function for handling LIST command
void handleListCommand(int client) {
    char message[50];
    int num;
    printf("Enter message number:");
    scanf("%d", &num);
    sprintf(message, "LIST %d", num);
    send(client, message, strlen(message), 0);

    char response[50];
    recv(client, response, 50, 0);

    if (strcmp(response, "+OK listing follows.") == 0) {
        // list the messages
        // receive messages from the server in a loop
    } else {
        printf("%s\n",response);
    }
}

// function for handling RET command
void handleRetCommand(int client) {
    char message[50];
    int num;
    printf("Enter message number:");
    scanf("%d", &num);
    sprintf(message, "RET %d", num);
    send(client, message, strlen(message), 0);

    char response[50];
    recv(client, response, 50, 0);

    if (strcmp(response, "+OK message follows.") == 0) {
        // receive message and display it
    } else {
        printf("%s\n",response);
    }
}
void handleDelCommand(int client) {
    char message[50];
    int num;
    printf("Enter message number:");
    scanf("%d", &num);
    sprintf(message, "DEL %d", num);
    send(client, message, strlen(message), 0);

    char response[50];
    recv(client, response, 50, 0);

    if (strcmp(response, "+OK message deleted.") == 0) {
        printf("Message deleted successfully.\n");
    } else {
        printf("%s\n",response);
    }
}

void handleSendCommand(int client) {
    char message[50], txt[50];
    int num;
    printf("Enter UserID: ");
    scanf("%d", &num);
    printf("Enter the message: ");
    scanf("%s", txt);
    sprintf(message, "SEND %d %s", num, txt);
    send(client, message, strlen(message), 0);

    char response[50];
    recv(client, response, 50, 0);

    if (strcmp(response, "+OK message sends to UserID.") == 0) {
        printf("Message sent successfully.\n");
    } else {
        printf("%s\n",response);
        }
}

void handleQuitCommand(int client) {
    char message[50];
    sprintf(message, "QUIT");
    send(client, message, strlen(message), 0);

    char response[50];
    recv(client, response, 50, 0);

    if (strcmp(response, "+OK Bye UserID.") == 0) {
        printf("Disconnecting from server...\n");
        close(client);
        exit(0);
    } else {
        printf("%s\n",response);
    }
}

while ((c = getopt(argc, argv, "d:p:u:")) != -1) {
    switch (c) {
        case 'd':
            strcpy(directory, optarg);
            break;
        case 'p':
            port = atoi(optarg);
            break;
        case 'u':
            strcpy(userFile, optarg);
            break;
        default:
            usage();
    }
}
